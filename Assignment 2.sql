-- Basic Aggregate Functions:

-- 1. Retrieve the total number of rentals made in the Sakila database.
      select count(*) from rental;
      
-- 2. Find the average rental duration (in days) of movies rented from the Sakila database.
	  select avg(rental_duration) from film;
  
-- String Functions:

-- 3. Display the first name and last name of customers in uppercase.
      select upper(first_name), upper(last_name) from customer; 
      
-- 4. Extract the month from the rental date and display it alongside the rental ID.
      select rental_id, month(rental_date) from rental;
      
-- GROUP BY:

-- 5. Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
      select customer_id,count(rental_id) from rental group by customer_id;
      
-- 6. Find the total revenue generated by each store.
      select s.store_id,sum(p.amount) from store s, staff st, payment p where s.manager_staff_id = st.staff_id and st.staff_id = p.staff_id group by s.store_id;

-- Joins:

-- 7. Display the title of the movie, customer's first name, and last name who rented it.
      select f.title,c.first_name,c.last_name from film f inner join inventory i on f.film_id = i. inventory_id  inner join rental r on i.inventory_id= r.inventory_id inner join customer c on r.customer_id=c.customer_id; 
      
-- 8. Retrieve the names of all actors who have appeared in the film "Gone with the Wind."     
      select a.first_name,a.last_name from actor a join film_actor fa on a.actor_id = fa.actor_id join film f on fa.film_id = f.film_id where f.title = "Gone with the Wind"; 
      
-- GROUP BY:

-- 1. Determine the total number of rentals for each category of movies.
      select fc.category_id,c.name as category_name ,count(rental_id) as total_rentals from rental r join inventory i on r.inventory_id = i.inventory_id join film_category fc on i.film_id = fc.film_id join category c on fc.category_id = c.category_id group by category_id;
      
-- 2. Find the average rental rate of movies in each language.
      select l.language_id, l.name, avg(rental_rate) from film f join language l on f.language_id = l.language_id group by language_id;
      
-- Joins:

-- 3. Retrieve the customer names along with the total amount they've spent on rentals.
       select concat(c.first_name, " " ,c.last_name) as customer_name,sum(amount) as total_amount from customer c join payment p on c.customer_id = p.customer_id join rental r on p.customer_id = r.customer_id group by c.customer_id;
       
-- 4. List the titles of movies rented by each customer in a particular city (e.g., 'London').
      select concat(c.first_name, "  " ,c.last_name) as customer_name, f.title,ci.city from customer c join address ad on c.address_id = ad.address_id join city ci on ad.city_id = ci.city_id join rental r on c.customer_id=r.customer_id join inventory i on r.inventory_id = i.inventory_id join film f on i.film_id = f.film_id where city = "london";       
       
-- Advanced Joins and GROUP BY:

-- 5. Display the top 5 rented movies along with the number of times they've been rented.
      select f.title,count(rental_id) from film f join inventory i on f.film_id = i.film_id join rental r on i.inventory_id = r.inventory_id  group by f.film_id limit 5;
      
-- 6. Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
        select c.customer_id,c.first_name,c.last_name from customer c inner join rental r on c.customer_id = r.customer_id inner join inventory i on r.inventory_id = i.inventory_id inner join store s on i.store_id = s.store_id where s.store_id in (1,2) group by c.customer_id,c.first_name,c.last_name having count(Distinct s.store_id) = 2;
      